trigger:
- main

variables:
  azureSubscription: '9a77c6b7-b89c-420d-9a92-2dc437472400'
  webAppName: 'MyWebApp'
  environmentName: 'Dev'
  vmImageName: 'ubuntu-latest'  # Using 'ubuntu-latest' VM for Azure-hosted agent

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    pool:
      vmImage: $(vmImageName)  

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js 20.x'

    - script: |
        npm install  # Install dependencies
        npm test     # Run tests (Make sure tests are configured in package.json)
      displayName: 'Install Dependencies and Run Tests'

    - task: ArchiveFiles@2
      displayName: 'Archive Build Artifacts'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'  # Archive all working directory files
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: 'drop'  # Publish artifact to be available for the Deploy stage

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()  # Ensure deployment runs only if the build succeeded
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure Web App'
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)  # Use hosted Ubuntu agent for the deployment job
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current  # Download the artifact from the build stage
            artifact: drop
            
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App (Linux)'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              runtimeStack: 'NODE|20LTS'  # Node.js 20 LTS runtime
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              startUpCommand: 'npm start'  # Ensure app starts with npm start